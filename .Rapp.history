combinations = getCombinations(IndependentVariables, 2)
combinations
combinations = getCombinations(IndependentVariables, 2)
getCombinations <- function(items, n)#
{#
	# for each combination level#
	for(i in 1:n)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		combinations = c();#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";#
			cat("\nn = ", n);#
			cat("\nlistOfCombinations = ", listOfCombinations[[n]]);#
			cat("\nlength(listOfCombination) = ", length(listOfCombinations[[n]]));#
			for(c in 1:length(listOfCombinations[[n]]))#
			{#
				cat("\nc = ", c);#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}#
				cat("\nstatement = ", S);#
			}#
			combinations = c(combinations, S);#
			rm(S);#
		}#
#
	}	#
	print(combinations);#
	return(combinations);#
}
combinations = getCombinations(IndependentVariables, 2)
combinations
getCombinations <- function(items, n)#
{#
	combinations = c();#
	# for each combination level#
	for(i in 1:n)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";#
			cat("\nn = ", n);#
			cat("\nlistOfCombinations = ", listOfCombinations[[n]]);#
			cat("\nlength(listOfCombination) = ", length(listOfCombinations[[n]]));#
			for(c in 1:length(listOfCombinations[[n]]))#
			{#
				cat("\nc = ", c);#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}#
				cat("\nstatement = ", S);#
			}#
			combinations = c(combinations, S);#
			rm(S);#
		}#
#
	}	#
	print(combinations);#
	return(combinations);#
}
combinations
combinations = getCombinations(IndependentVariables, 2)
combinations
getCombinations <- function(items, n)#
{#
	combinations = c();#
	# for each combination level#
	for(i in 1:n)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";#
			cat("\nn = ", n);#
			cat("\nlistOfCombinations = ", listOfCombinations[[n]]);#
			cat("\nlength(listOfCombination) = ", length(listOfCombinations[[n]]));#
			for(c in 1:length(listOfCombinations[[n]]))#
			{#
				cat("\nc = ", c);#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			cat("\nstatement = ", S);#
			combinations = c(combinations, S);#
			rm(S);#
		}#
#
	}	#
	print(combinations);#
	return(combinations);#
}
combinations = getCombinations(IndependentVariables, 1)
getCombinations <- function(items, n)#
{#
	combinationList = c();#
	# for each combination level#
	for(i in 1:n)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";#
			cat("\nn = ", n);#
			cat("\nlistOfCombinations = ", listOfCombinations[[n]]);#
			cat("\nlength(listOfCombination) = ", length(listOfCombinations[[n]]));#
			for(c in 1:length(listOfCombinations[[n]]))#
			{#
				cat("\nc = ", c);#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			cat("\nstatement = ", S);#
			combinationList = c(combinationList, S);#
			rm(S);#
		}#
#
	}	#
	print(combinationList);#
	return(combinationList);#
}
combinations = getCombinations(IndependentVariables, 1)
combinations
combinations = getCombinations(IndependentVariables, 2)
combinations
combinations = getCombinations(IndependentVariables, 3)
combinations
combinations = getCombinations(IndependentVariables, 4)
combinations
getCombinations <- function(items)#
{#
	combinationList = c();#
	nItems = length(items);#
	# for each combination level#
	for(i in 1:nItems)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";#
			cat("\nn = ", n);#
			cat("\nlistOfCombinations = ", listOfCombinations[[n]]);#
			cat("\nlength(listOfCombination) = ", length(listOfCombinations[[n]]));#
			for(c in 1:length(listOfCombinations[[n]]))#
			{#
				cat("\nc = ", c);#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			cat("\nstatement = ", S);#
			combinationList = c(combinationList, S);#
			rm(S);#
		}#
#
	}	#
	print(combinationList);#
	return(combinationList);#
}
combinations = getCombinations(IndependentVariables)
combinations
IV = c("1","2","3","4","5","6","7")
getCombinations(IV)
X = getCombinations(IV)
X
length(X)
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables));	#
	print(factorString);#
}
MLM(weightLoss, weightLost, c("exercise", "condition"), participantID)
toFormulaString <- function(factors)#
{#
	theString = "";#
	for(i in 1:length(factors))#
	{#
		if(length(factors) == 1)#
		{#
			theString = factors[i];#
		}#
		else#
		{#
			if(i == length(factors))#
			{#
				theString = paste(theString, factors[i], sep="");#
			}#
			else#
			{#
				theString = paste(theString, factors[i], " + ", sep="");#
			}#
		}#
	}#
	return theString;#
}
toFormulaString <- function(factors)#
{#
	theString = "";#
	for(i in 1:length(factors))#
	{#
		if(length(factors) == 1)#
		{#
			theString = factors[i];#
		}#
		else#
		{#
			if(i == length(factors))#
			{#
				theString = paste(theString, factors[i], sep="");#
			}#
			else#
			{#
				theString = paste(theString, factors[i], " + ", sep="");#
			}#
		}#
	}#
	return(theString);#
}
MLM(weightLoss, weightLost, c("exercise", "condition"), participantID)
getC9bgetCombinations <- function(items)#
{#
	combinationList = c();#
	nItems = length(items);#
	# for each combination level#
	for(i in 1:nItems)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";			#
			for(c in 1:length(listOfCombinations[[n]]))#
			{				#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			combinationList = c(combinationList, S);#
			rm(S);#
		}#
	}	#
	return(combinationList);#
}
getCombinations <- function(items)#
{#
	combinationList = c();#
	nItems = length(items);#
	# for each combination level#
	for(i in 1:nItems)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";			#
			for(c in 1:length(listOfCombinations[[n]]))#
			{				#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			combinationList = c(combinationList, S);#
			rm(S);#
		}#
	}	#
	return(combinationList);#
}
MLM(weightLoss, weightLost, c("exercise", "condition"), participantID)
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
	# get model#
	model = lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
MLM(weightLoss, weightLost, c("exercise", "condition"), participantID)
MLM(weightLoss, "weightLost", c("exercise", "condition"), "participantID")
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, " + (1 |", subject, ")", sep=""); # append factorString to create formula	#
	# get model#
	model = lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
MLM(weightLoss, "weightLost", c("exercise", "condition"), "participantID")
MLM(weightLoss, "weightLost", c("exercise"), "participantID")
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, " + (1 |", subject, ")", sep=""); # append factorString to create formula	#
	print(formula);#
	# get model#
	model = lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
MLM(weightLoss, "weightLost", c("exercise"), "participantID")
model = lmer(weightLost ~ exercise + (1 | participantID), data = weightLoss)
head(phone)
MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, " + (1 |", subject, ")", sep=""); # append factorString to create formula	#
	# get model#
	model = lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
result = MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
result
summary(anova)
summary(result)
aov(result)
library(lmerTest)#
fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)#
anova(fm1, ddf="Kenward-Roger")
result = MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
?lme
??lme
lme4
??lme4
install.packages("lme4")
library(lme4)
?lme4
result = MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
?lmer
model = lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 ))
model = lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
model
model = lmerTest::lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
model
anova(model)
anova(model, ddf="Kenward-Roger")
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, " + (1 |", subject, ")", sep=""); # append factorString to create formula	#
	# get model#
	model = lmerTest::lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
result = MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
MLM <- function (dataset, dependentVariable, independentVariables, subject) #
{#
	dataset = as.data.frame(dataset);#
	factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
	formula = paste(dependentVariable, " ~ ", factorString, " + (1 |", subject, ")", sep=""); # append factorString to create formula	#
	print(formula)#
	# get model#
	model = lmerTest::lmer(formula, data = dataset);#
	# perform Wald's test with Kenward-Roger correction#
	result = anova(model, ddf = "Kenward-Roger");#
	return(result);#
}
result = MLM(phone, "stressScore", c("phoneOS", "gender"), "participantID")
model = lme4::lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
model
anova(model, ddf="Kenward-Roger")
model = lmerTest::lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
anova(model, ddf="Kenward-Roger")
??lme4::lmer
?lmer
MLM
lmerTest::lmer
lmerTest:lme4(stressScore ~ phoneOS + gender + phoneOS:gender + (1 |participantID), data = phone)
lmerTest::lme4(stressScore ~ phoneOS + gender + phoneOS:gender + (1 |participantID), data = phone)
library(lmerTest)
library(devtools)
library(opencpu)
install_git("/Users/krishsub/Code/VisiStat.git/")
opencpu$browse("library/VisiStat/www")
library(lmerTest)
?lmerTest
anova
showMethods("anova")
?anova
lmerTest::anova
anova
stats::anova
phone = read.csv("/Users/krishsub/Code/VisiStat/data/phoneOS.csv", head=T, sep=";")
library(lmerTEst)
library(lmerTest)
model = lmerTest::lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
anova(model, ddf = "Kenward-Roger")
anova(model)
phone = read.csv("/Users/krishsub/Code/VisiStat/data/phoneOS.csv", head=T, sep=";")
model = lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
model = lmerTest::lmer(stressScore ~ phoneOS + gender + phoneOS:gender + (1 | participantID), data = phone)
anova(model, ddf="Kenward-Roger")
lmerTest::anova(model, ddf="Kenward-Roger")
library(pbkrtest)
lmerTest::anova(model, ddf="Kenward-Roger")
anova(model, ddf="Kenward-Roger")
install.packages("pgirmess")
library(pgirmess)
y
library(pgirmess)
install.packages("pgirmess")
library(devtools)
library(opencpu)
opencpu$browse("library/VisiStat/www")
??read.csv
colNames
??colNames
colnames
?names
library
library(ggplot2)
students = c('Max', 'Nicole', 'Andy', 'Jessie', 'James', 'Bill', 'Greg', 'Lizzy')
Questions = read.csv("/Users/krishsub/Desktop/Questions.csv", head=T)
Questions
?sum
Questions.Memory = subset(Questions, Type == "Memory" | Type == "Memory/Divergent" | Type == "Memory/Convergent")
Questions.Memory
sum(Questions.Memory$Points)
sum(Questions$Points)
Questions.History = subset(Questions, Topic == "History")
Questions.DesignProcess = subset(Questions, Topic == "DesignProcess")
sum(Questions.History$Points)
sum(Questions.DesignProcess$Points)
summary(Questions)
dataset
dataset = read.csv("/Users/krishsub/Code/VisiStat/VisiStat_Oliver/VisiStat/data/test.csv", sep=";")
dataset
head(dataset)
independentVariables = c("IV1", "IV2", "IV3")
dependentVariable = "DV"
levels(dataset$IV1)
length(levels(dataset$IV1))
dataset[IV1]
dataset["IV1"]
performNWayANOVA <- function (dataset, dependentVariable, independentVariables) #
{#
  dataset = as.data.frame(dataset);#
  factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
  formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
  formula = as.formula(formula)#
#
  # set contrasts for IVs#
  nIVs = length(independentVariables)#
#
  for(i in 1:nIVs)#
  {#
  	# get levels#
  	nLevels = length(levels(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))));#
  	contrasts(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))) =  contr.helmert(nLevels);#
  }#
  # get model#
  model = lm(formula, data = dataset);#
  # perform type III ANOVA#
  result = car::Anova(model, type="III", singular.ok = T);  #
  eSquared = lsr::etaSquared(model, type=3);#
  labels = names(eSquared[,1])#
#
  list(p = result[["Pr(>F)"]][2:(length(labels)+1)], F = result[["F value"]][2:(length(labels)+1)], numDF = result[["Df"]][2:(length(labels)+1)], denomDF = result[["Df"]][length(result[["Df"]])], etaSquared = eSquared[,1], labels = labels);#
}
performNWayANOVA(dataset, dependentVariable, independentVariables)
toFormulaString <- function(factors)#
{#
	theString = "";#
	for(i in 1:length(factors))#
	{#
		if(length(factors) == 1)#
		{#
			theString = factors[i];#
		}#
		else#
		{#
			if(i == length(factors))#
			{#
				theString = paste(theString, factors[i], sep="");#
			}#
			else#
			{#
				theString = paste(theString, factors[i], " + ", sep="");#
			}#
		}#
	}#
	return(theString);#
}
getCombinations <- function(items)#
{#
	combinationList = c();#
	nItems = length(items);#
	# for each combination level#
	for(i in 1:nItems)#
	{#
		combinations = combn(items, i); #get all combinations (in matrix)#
		# ===== construct statement manually ==== #
		statement = "listOfCombinations = list("; #
		for(n in 1:ncol(combinations)) # for each column#
		{#
			if(n < ncol(combinations))#
				statement = paste(statement, "combinations[,", n, "],", sep="")#
			else#
				statement = paste(statement, "combinations[,", n, "]", sep="")#
		}#
		statement = paste(statement, ")", sep="");#
		eval(parse(text = statement)); # evaluate the statement to get the list of required elements#
		for(n in 1:length(listOfCombinations))#
		{#
			S = "";			#
			for(c in 1:length(listOfCombinations[[n]]))#
			{				#
				if(length(listOfCombinations[[n]]) == 1)#
				{#
					S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
				}#
				else#
				{#
					if(c == length(listOfCombinations[[n]]))#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], sep=""); # append variable name#
					}#
					else#
					{#
						S = paste(S, listOfCombinations[[n]][[c]], ":", sep=""); # append variable name#
					}										#
				}				#
			}#
			combinationList = c(combinationList, S);#
			rm(S);#
		}#
	}	#
	return(combinationList);#
}
performNWayANOVA(dataset, dependentVariable, independentVariables)
performNWayANOVA <- function (dataset, dependentVariable, independentVariables) #
{#
  dataset = as.data.frame(dataset);#
  factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
  formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
  formula = as.formula(formula)#
#
  # set contrasts for IVs#
  nIVs = length(independentVariables)#
#
  for(i in 1:nIVs)#
  {#
  	# get levels#
  	nLevels = length(levels(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))));#
  	eval(parse(text = paste("contrasts(dataset$", independentVariables[i], ") = contr.helmert(", nLevels, ")", sep=""))));#
  }#
  # get model#
  model = lm(formula, data = dataset);#
  # perform type III ANOVA#
  result = car::Anova(model, type="III", singular.ok = T);  #
  eSquared = lsr::etaSquared(model, type=3);#
  labels = names(eSquared[,1])#
#
  list(p = result[["Pr(>F)"]][2:(length(labels)+1)], F = result[["F value"]][2:(length(labels)+1)], numDF = result[["Df"]][2:(length(labels)+1)], denomDF = result[["Df"]][length(result[["Df"]])], etaSquared = eSquared[,1], labels = labels);#
}
performNWayANOVA <- function (dataset, dependentVariable, independentVariables) #
{#
  dataset = as.data.frame(dataset);#
  factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
  formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
  formula = as.formula(formula)#
#
  # set contrasts for IVs#
  nIVs = length(independentVariables)#
#
  for(i in 1:nIVs)#
  {#
  	# get levels#
  	nLevels = length(levels(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))));#
  	eval(parse(text = paste("contrasts(dataset$", independentVariables[i], ") = contr.helmert(", nLevels, ")", sep="")));#
  }#
  # get model#
  model = lm(formula, data = dataset);#
  # perform type III ANOVA#
  result = car::Anova(model, type="III", singular.ok = T);  #
  eSquared = lsr::etaSquared(model, type=3);#
  labels = names(eSquared[,1])#
#
  list(p = result[["Pr(>F)"]][2:(length(labels)+1)], F = result[["F value"]][2:(length(labels)+1)], numDF = result[["Df"]][2:(length(labels)+1)], denomDF = result[["Df"]][length(result[["Df"]])], etaSquared = eSquared[,1], labels = labels);#
}
performNWayANOVA(dataset, dependentVariable, independentVariables)
result
performNWayANOVA <- function (dataset, dependentVariable, independentVariables) #
{#
  dataset = as.data.frame(dataset);#
  factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
  formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
  formula = as.formula(formula)#
#
  # set contrasts for IVs#
  nIVs = length(independentVariables)#
#
  for(i in 1:nIVs)#
  {#
  	# get levels#
  	nLevels = length(levels(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))));#
  	eval(parse(text = paste("contrasts(dataset$", independentVariables[i], ") = contr.helmert(", nLevels, ")", sep="")));#
  }#
  # get model#
  model = lm(formula, data = dataset);#
  # perform type III ANOVA#
  result = car::Anova(model, type="III", singular.ok = T);  #
  eSquared = lsr::etaSquared(model, type=3);#
  labels = names(eSquared[,1])#
#
  result#
#
  list(p = result[["Pr(>F)"]][2:(length(labels)+1)], F = result[["F value"]][2:(length(labels)+1)], numDF = result[["Df"]][2:(length(labels)+1)], denomDF = result[["Df"]][length(result[["Df"]])], etaSquared = eSquared[,1], labels = labels);#
}
performNWayANOVA(dataset, dependentVariable, independentVariables)
performNWayANOVA <- function (dataset, dependentVariable, independentVariables) #
{#
  dataset = as.data.frame(dataset);#
  factorString = toFormulaString(getCombinations(independentVariables)); # the magic function(s)		#
  formula = paste(dependentVariable, " ~ ", factorString, sep=""); # append factorString to create formula	#
  formula = as.formula(formula)#
#
  # set contrasts for IVs#
  nIVs = length(independentVariables)#
#
  for(i in 1:nIVs)#
  {#
  	# get levels#
  	nLevels = length(levels(eval(parse(text = paste("dataset$", independentVariables[i], sep="")))));#
  	eval(parse(text = paste("contrasts(dataset$", independentVariables[i], ") = contr.helmert(", nLevels, ")", sep="")));#
  }#
  # get model#
  model = lm(formula, data = dataset);#
  # perform type III ANOVA#
  result = car::Anova(model, type="III", singular.ok = T);  #
  eSquared = lsr::etaSquared(model, type=3);#
  labels = names(eSquared[,1])#
#
  result#
}
performNWayANOVA(dataset, dependentVariable, independentVariables)
?p.adjust
p.adjust
p.adjust(0.05, p.adjust="bonferroni", n=10)
p.adjust(0.05, method="bonferroni", n=10)
p.adjust(0.1, method="bonferroni", n=4)
install.packages("fifer")
data = read.csv("/Users/krishsub/Desktop/CHIsquare.csv", head=T, sep=";")
data
library(fifer)
chisq.post.hoc(data)
stack(data)
data_stacked = stack(data)
chisq.post.hoc(data, control = "bonferroni")
chisq.post.hoc(data_stacked, control = "bonferroni")
M <- as.table(rbind(c(76, 32, 46), c(48,23,47), c(45,34,78)))    dimnames(M) <- list(sex=c("Male","Female","Juv"),loc=c("Lower","Middle","Upper"))    M
data = read.csv("/Users/krishsub/Desktop/CHIsquare.csv", head=T, sep=";", row.names=F)
?read.csv
data = read.csv("/Users/krishsub/Desktop/CHIsquare.csv", head=T, sep=";", row.names=c("Gesture", "Voodoo", "Affordance", "Text", "Abstract"))
data_new = data.frame(Gesture = data$Gesture, Voodoo = data$Voodoo, Affordance = data$Affordance, Text = data$Text, Abstract = data$Abstract)
data_new
data_new = as.table(Gesture = data$Gesture, Voodoo = data$Voodoo, Affordance = data$Affordance, Text = data$Text, Abstract = data$Abstract)
M <- as.table(rbind(c(3, 4, 2, 3), c(3, 1, 7, 1), c(8, 1, 1, 2), c(8, 1, 1, 2)))
dimnames(M) <- list(Gestures = c("Push", "Squeeze", "Tap", "Move"), Design = c("Voodoo", "Affordance", "Text", "Abstract"))
M
chisq.post.hoc(M)
chisq.post.hoc(M, control = "bonferroni")
t(M)
chisq.post.hoc(t(M), control = "bonferroni")
M.new = M(1:1)
M.new = M[1:1]
M.new
M.new = M[1:]
M <- as.table(rbind(8, 1, 1, 2))
dimnames(M) <- list(Design = c("Voodoo", "Affordance", "Text", "Abstract"), Gestures = "Tap")
M
chisq.post.hoc(M, control="bonferroni")
chisq.post.hoc(t(M), control="bonferroni")
install("polytomous")
install.packages("polytomous")
library(polytomous)
chisq.posthoc(M)
M <- as.table(rbind(c(3, 4, 2, 3), c(3, 1, 7, 1), c(8, 1, 1, 2), c(8, 1, 1, 2)))#
dimnames(M) <- list(Gestures = c("Push", "Squeeze", "Tap", "Move"), Design = c("Voodoo", "Affordance", "Text", "Abstract"))
M
chisq.posthoc(M)
chisq.post.hoc
# Makes a table of observations -- similar to first example in chisq.test#
M <- as.table(rbind(c(76, 32, 46), c(48,23,47), c(45,34,78)))#
dimnames(M) <- list(sex=c("Male","Female","Juv"),loc=c("Lower","Middle","Upper"))#
M#
# Fits chi-square test and shows summary#
( chi1 <- chisq.test(M) )#
# Shows post-hoc pairwise comparisons using fdr method#
chisqPostHoc(chi1)#
#
# Transpose the observed table to demonstrate use of popsInRows=FALSE#
( chi2 <- chisq.test(t(M)) )#
chisqPostHoc(chi2,popsInRows=FALSE)
install.packages("NCStats")
M
chisq.test(M[, -1])
M[, -1]
M[, 1]
chisq.test(M[, 1])
chisq.test(M[, 2])
chisq.test(M[, 3])
?chisq.test
chisq.test(x = c("a", "b"), y = c(50, 100))
chisq.test(x = c("a", "b"), y = c(50, 200))
chisq.test(x = c("a", "b", "c"), y = c(50, 200, 200))
M <- as.table(rbind(c(3, 4, 2, 3), c(3, 1, 7, 1), c(8, 1, 1, 2), c(8, 1, 1, 2)))#
dimnames(M) <- list(Gestures = c("Push", "Squeeze", "Tap", "Move"), Design = c("Voodoo", "Affordance", "Text", "Abstract"))
M
M <- as.table(rbind(1,2,3,4)#
dimnames(M) <- list(Design = c("Voodoo", "Affordance", "Text", "Abstract"), Gesture = "Push")
M <- as.table(rbind(1,2,3,4))#
dimnames(M) <- list(Design = c("Voodoo", "Affordance", "Text", "Abstract"), Gesture = "Push")
M
mcnemar.test
mcnemar.test(M)
chisq.test(M)
?chisq.test
fisher.test(M)
M <- as.table(rbind(c(1, 2, 8), c(2, 3, 6), c(9, 12, 2))#
dimnames(M) <- list(Design = c("Voodoo", "Affordance", "Text"), Gestures = c("Push", "Squeeze", "Tap"))
M <- as.table(rbind(c(1, 2, 8), c(2, 3, 6), c(9, 12, 2)) #
dimnames(M) <- list(Design = c("Voodoo", "Affordance", "Text"), Gestures = c("Push", "Squeeze", "Tap"))
M <- as.table(rbind(c(3, 4, 2, 3), c(3, 1, 7, 1), c(8, 1, 1, 2), c(8, 1, 1, 2)))
dimnames(M) <- list(Gestures = c("Push", "Squeeze", "Tap", "Move"), Design = c("Voodoo", "Affordance", "Text", "Abstract"))
M
chisq.test(M)
chisq.post.hoc(M)
chisq.post.hoc(t(M))
chisq.post.hoc(t(M), control="bonferroni")
library(devtools)
library(opencpu)
setwd("/Users/krishsub/Code/VisiStat/VisiStat_OpenCPU")
install("VisiStat")
install()
opencpu$browse("library/VisiStat/www")
install()
