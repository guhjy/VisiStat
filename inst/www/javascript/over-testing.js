// Generated by CoffeeScript 1.9.1
var PartialTestLogger, base, checkIfOverTesting, continuePairwiseTesting, displayOverTestingPopup, doOmnibusTest, lastVariableList, root, theLogger,
  slice = [].slice;

theLogger = null;

lastVariableList = null;

PartialTestLogger = (function() {
  function PartialTestLogger() {
    this.log = {};
  }


  /**
   * Return a formatted key for the PartialTestLogger instance
   * @param  {string(s)} ivs [one or multiple strings of IV names]
   * @return {string}        [a formatted key for the PartialTestLogger instance]
   */

  PartialTestLogger.prototype.ivKey = function() {
    var ivs;
    ivs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return JSON.stringify(ivs.sort());
  };


  /**
   * Return the number of partial tests used
   * @param  {string} dv     [DV name]
   * @param  {string(s)} ivs [one or multiple strings of IV names]
   * @return {integer}       [the number of partial tests used]
   */

  PartialTestLogger.prototype.countMatchingTests = function() {
    var dv, ivs;
    dv = arguments[0], ivs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!this.log.hasOwnProperty(dv)) {
      return 0;
    }
    return this.log[dv][this.ivKey(ivs)];
  };


  /**
   * Reset the counter of the test matching the given parameters
   * @param  {string} dv     [DV name]
   * @param  {string(s)} ivs [one or multiple strings of IV names]
   */

  PartialTestLogger.prototype.resetMatchingTests = function() {
    var dv, ivs;
    dv = arguments[0], ivs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!this.log.hasOwnProperty(dv)) {
      return 0;
    }
    return this.log[dv][this.ivKey(ivs)] = 0;
  };


  /**
   * Update the number of partial tests used
   * @param  {object} variableList variables used
   */

  PartialTestLogger.prototype.update = function(variableList) {
    var allLevels, base, base1, comparedLevels, dv, iv, ivs, theIvKey;
    if (variableList["independent"].length !== 1) {
      return;
    }
    iv = variableList["independent"][0];
    comparedLevels = variableList["independent-levels"];
    allLevels = variables[iv]["dataset"].unique();
    dv = variableList["dependent"][0];
    ivs = [iv];
    theIvKey = this.ivKey(ivs);
    if (comparedLevels.length < allLevels.length) {
      if ((base = this.log)[dv] == null) {
        base[dv] = {};
      }
      if ((base1 = this.log[dv])[theIvKey] == null) {
        base1[theIvKey] = 0;
      }
      return this.log[dv][theIvKey]++;
    }
  };

  return PartialTestLogger;

})();


/**
 * Checks if there is cyclic testing for over-testing. The number of distributions involved should be > 2.
 * Also update the PartialTestLogger instance.
 * @return {Boolean} true if over-testing
 */

checkIfOverTesting = function() {
  var dv, iv, ivs;
  if (!(listOfLevelsCompared.length > 0)) {
    return;
  }
  if (theLogger == null) {
    theLogger = new PartialTestLogger();
  }
  lastVariableList = listOfLevelsCompared[listOfLevelsCompared.length - 1];
  theLogger.update(lastVariableList);
  if (lastVariableList["independent"].length !== 1) {
    return;
  }
  dv = lastVariableList["dependent"][0];
  iv = lastVariableList["independent"][0];
  ivs = [iv];
  if (theLogger.countMatchingTests.apply(theLogger, [dv].concat(slice.call(ivs))) === 2) {
    return displayOverTestingPopup(dv, iv);
  }
};


/**
Displays the popup (warning and corrective procedure) for over-testing
@param  {string} DV [Dependent variable]
@param  {string} IV [Independent variable]
 */

displayOverTestingPopup = function(DV, IV) {
  var div, htmlText, i, levels, testedPairs;
  root.VisiStat.UI.Dimmer.addDimmer();
  div = d3.select("body").append("div").attr("id", "overTestingPopup");
  testedPairs = [];
  levels = variables[IV]["dataset"].unique();
  i = 0;
  while (i < listOfLevelsCompared.length) {
    if (listOfLevelsCompared[i]["independent"] === IV) {
      testedPairs.push("<li>" + listOfLevelsCompared[i]["independent-levels"][0] + " vs. " + listOfLevelsCompared[i]["independent-levels"][1] + "</li>");
    }
    i++;
  }
  htmlText = "";
  htmlText += "<div class='overTestingHead'>Possible false-positive</div>" + "<div class='overTestingBody'>" + "You have compared " + fV(IV) + " multiple times. " + "Avoid increased false positive by comparing all " + fV(IV) + " in a single run" + "<label class='overTesting'><button class='btn btn-primary' onClick='root.VisiStat.OverTesting.doOmnibusTest()'/> Fix it for me" + "<span class='overTestingExplanation'>Perform omni-bus test: " + fV(DV) + " ~ " + fV(IV) + "(" + levels + "). </span></button></label>" + "<label class='overTesting'><button class='btn' onClick='root.VisiStat.OverTesting.continuePairwiseTesting()'/>Don't fix." + "<span class='overTestingExplanation'>Suitable when each tests are individual research questions.</span></button> </label>";
  div.html(htmlText);
};

continuePairwiseTesting = function() {
  var dv, iv;
  root.VisiStat.UI.Dimmer.removeDimmer();
  removeElementById("overTestingPopup");
  dv = lastVariableList["dependent"][0];
  iv = lastVariableList["independent"][0];
  return theLogger.resetMatchingTests(dv, iv);
};

doOmnibusTest = function() {
  var dv, iv, selectedVariables, selectedVisualisation;
  root.VisiStat.UI.Dimmer.removeDimmer();
  removeElementById("overTestingPopup");
  resetSVGCanvas();
  selectedVariables = listOfVariableSelections[numberOfEntriesInHistory - 1].clone();
  selectedVisualisation = "Boxplot";
  selectDefaultVisualisation();
  plotVisualisation();
  setVisibilityOfVisualisations();
  removeElementsByClassName("compareMean");
  d3.selectAll(".IQRs, .medians, .TOPFringes, .BOTTOMFringes, .TOPFringeConnectors, .BOTTOMFringeConnectors, .outliers, .CIs, .CITopFringes, .CIBottomFringes").style("opacity", "0.8");
  selectAllMeans();
  compareMeans();
  dv = lastVariableList["dependent"][0];
  iv = lastVariableList["independent"][0];
  return theLogger.resetMatchingTests(dv, iv);
};

root = typeof exports !== "undefined" && exports !== null ? exports : this;

if (root.VisiStat == null) {
  root.VisiStat = {};
}

if ((base = root.VisiStat).OverTesting == null) {
  base.OverTesting = {};
}

root.VisiStat.OverTesting.checkIfOverTesting = checkIfOverTesting;

root.VisiStat.OverTesting.continuePairwiseTesting = continuePairwiseTesting;

root.VisiStat.OverTesting.doOmnibusTest = doOmnibusTest;

//# sourceMappingURL=over-testing.js.map
